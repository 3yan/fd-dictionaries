toolsdir := $(FREEDICTDIR)/tools
include $(toolsdir)/Makefile.config

#######################
#### set some variables
#######################

xsldir := $(toolsdir)/xsl
tei2dict := $(toolsdir)/xmltei2xmldict.pl
xmllint := /usr/bin/xmllint

dictname := $(shell basename $(shell pwd))
rdictname := $(shell export V=$(dictname); echo $${V:4:3}-$${V:0:3})

# Extracting the tiny edition element contents per XSLT is
# overdimensioned.
# version1 = $(shell $(XSLTPROCESSOR) $(xsldir)/getedition.xsl $(dictname).tei)

# So we use grep to extract the edition.
# if $(version) contains spaces: 
# Makefile.common:235: *** mixed implicit and normal rules.  Stop.
# so spaces are substituted by underscores
empty:=
space:= $(empty) $(empty)
version1 = $(shell grep -m 1 -o -P -e \
	  "(?<=<edition>).+(?=</edition>)" $(dictname).tei)
version = $(subst $(space),_,$(version1))

################
# default target
################

all:	$(dictname).dict $(dictname).index	

##################################################
#### targets to extract information from TEI files
##################################################

# no newline, so output is equal to the output of
# xsl/getedition.xsl / xsl/getstaus.xsl
version: $(dictname).tei
	@echo -n "$(version)"

# alternative: @$(XSLTPROCESSOR) $(xsldir)/getstatus.xsl $(dictname).tei
status: $(dictname).tei
	@echo -n "$(shell grep -m 1 -o -P -e \
	"(?<=<note type=\"status\">).+(?=</note>)" $(dictname).tei)"

sourceURL: $(dictname).tei
	@echo -n "$(shell grep -m 1 -o -P -e \
	"(?<=<xptr url=\").+(?=\"\/>)" $(dictname).tei)"

maintainer: $(dictname).tei $(xsldir)/getmaintainer.xsl
	@$(XSLTPROCESSOR) $(xsldir)/getmaintainer.xsl $<

find-homographs: $(dictname).tei
	@cat $< | grep orth | \
	sed -e s:'          <orth>':'':g -e s:'<\/orth>':'':g | sort -f | \
	uniq -i -d

##################################################
#### create direcories where release files are put
##################################################

dirs:
	@if [ ! -d $(FREEDICTDIR)/release/dict-tgz ]; then \
		mkdir $(FREEDICTDIR)/release/dict-tgz; fi
	@if [ ! -d $(FREEDICTDIR)/release/dict-tbz2 ]; then \
		mkdir $(FREEDICTDIR)/release/dict-tbz2; fi

#############################################################
#### rules how to create dict database format in standard way
#############################################################

%.dict %.index: %.tei
	export SGML_CATALOG_FILES="$(XMLSOC):$(SGML_CATALOG_FILES)";\
	$(tei2dict) -f $< $(TEI2DICTFLAGS) -t $(xsldir)/tei2txt.xsl

%.dz: %
	dictzip -k $<

%.tar.gz: %.dict.dz %.index
	tar czf $*.tar.gz $*.dict.dz $*.index

%.tar.bz2: %.dict.dz %.index
	tar cjf $*.tar.bz2 $*.dict.dz $*.index

release-dict-tgz: $(dictname).tar.gz dirs
	cp $(dictname).tar.gz \
	$(FREEDICTDIR)/release/dict-tgz/freedict-$(dictname)-$(version).tar.gz

release-dict-tgz-reverse: $(rdictname).tar.gz dirs
	cp $(rdictname).tar.gz \
	$(FREEDICTDIR)/release/dict-tgz/freedict-$(rdictname)-$(version).tar.gz

release-dict-tbz2: $(dictname).tar.bz2 dirs
	cp $(dictname).tar.bz2 \
	$(FREEDICTDIR)/release/dict-bz2/freedict-$(dictname)-$(version).tar.bz2

release-dict-tbz2-reverse: $(rdictname).tar.bz2 dirs
	cp $(rdictname).tar.bz2 \
	$(FREEDICTDIR)/release/dict-bz2/freedict-$(rdictname)-$(version).tar.bz2

reverse: $(dictname).tei
	@echo "Will generate $(rdictname):"
	export SGML_CATALOG_FILES="$(XMLSOC):$(SGML_CATALOG_FILES)";\
	$(tei2dict) -f $< -r $(TEI2DICTFLAGS) -t $(xsldir)/tei2txt.xsl
	mv $(dictname).index $(rdictname).index
	mv $(dictname).dict $(rdictname).dict
	dictzip -k $(rdictname).dict

######################################################################
#### targets for c5/dictfmt conversion style into dict database format
######################################################################

$(dictname).c5: $(dictname).tei $(xsldir)/tei2c5.xsl \
       	$(xsldir)/inc/teientry2txt.xsl \
	$(xsldir)/inc/teiheader2txt.xsl \
	$(xsldir)/inc/indent.xsl
	$(XSLTPROCESSOR) $(xsldir)/tei2c5.xsl $< >$@

$(dictname)-reverse.c5: $(dictname).tei $(xsldir)/tei2c5-reverse.xsl
	$(XSLTPROCESSOR) $(xsldir)/tei2c5-reverse.xsl $< >$@

%.c5.dict %.c5.index: %.c5
	dictfmt -t --headword-separator %%% $(DICTFMTFLAGS) $*.c5 <$<

$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version).tar.bz2: \
	$(dictname).c5.dict.dz $(dictname).c5.index
	cd .. && \
	tar -cvjf $@ $(addprefix $(dictname)/, $^)

release-dict-tbz2-c5: dirs \
	$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version).tar.bz2
	
$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version)-reverse.tar.bz2: \
	$(dictname)-reverse.c5.dict.dz $(dictname)-reverse.c5.index
	cd .. && \
	tar -cvjf $@ $(addprefix $(dictname)/, $^)

release-dict-tbz2-c5-reverse: dirs \
	$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version)-reverse.tar.bz2

######################################
#### targets for evolutionary platform
######################################

date=$(shell date +%G-%m-%d)

$(FREEDICTDIR)/release/vok/%.vok: %.tei $(xsldir)/tei2vok.xsl \
	$(xsldir)/inc/teiheader2txt.xsl $(xsldir)/inc/indent.xsl
	@if [ ! -d $(FREEDICTDIR)/release/vok ]; then \
	  mkdir $(FREEDICTDIR)/release/vok; fi
	@if [ "$(firstword $(XSLTPROCESSOR))" == "xsltproc" ]; then \
	  echo "Warning! xsltproc does not warn of invalid chars in output encoding."; \
	  $(XSLTPROCESSOR) --stringparam current-date $(date) $(xsldir)/tei2vok.xsl $< >$@; \
	  else \
	  $(XSLTPROCESSOR) $(xsldir)/tei2vok.xsl $< \$current-date=$(date) >$@; fi

vok: $(FREEDICTDIR)/release/vok/$(dictname).vok

$(FREEDICTDIR)/release/vok/tld/%.tld: $(FREEDICTDIR)/release/vok/%.vok
	@if [ ! -d $(FREEDICTDIR)/release/vok/tld ]; then \
		mkdir $(FREEDICTDIR)/release/vok/tld; fi
ifdef EVOLUTIONARY_WINE
	$(EVOLUTIONARY_WINE) $<
else
	@echo "To convert from '.vok' to '.tld' requires manual invervention,"
	@echo "because the 'Dictionary.exe' tool for it is a Win32 Application."
	@echo "Fortunately, it runs in the Windows Emulator 'Wine'."
	@echo "Please define EVOLUTIONARY_WINE in $(toolsdir)/Makefile.config"
	exit 1
endif

release-evolutionary: $(FREEDICTDIR)/release/vok/tld/$(dictname).tld
	(cd $(FREEDICTDIR)/release/vok/tld; \
	 rm -f $(dictname)-$(version)-evolutionary.zip; \
	 zip freedict-$(dictname)-$(version).evolutionary.zip $(dictname).tld)

clean::
	rm -f $(FREEDICTDIR)/release/vok/$(dictname).vok \
	$(FREEDICTDIR)/release/vok/tld/$(dictname).tld \
	freedict-$(dictname)-$(version).evolutionary.zip

######################
#### not used by me :)
######################

install: $(dictname).dict.dz $(dictname).index
	install -d $(DESTDIR)
	install -m 644 $^ $(DESTDIR)
	if [ -x /usr/sbin/dictdconfig ]; then /usr/sbin/dictdconfig -w; fi

uninstall: 
	-rm $(DESTDIR)/$(dictname).dict.dz $(DESTDIR)/$(dictname).index
	if [ -x /usr/sbin/dictdconfig ]; then /usr/sbin/dictdconfig -w; fi

########################
#### maintenance targets
########################

validation: $(dictname).tei
	# way 1
	@test -e $(XMLSOC) || (echo "Please set path to xml.soc file!"; exit 1)
	export SP_ENCODING=XML; \
	export SP_CHARSET_FIXED=YES; \
	export SGML_CATALOG_FILES="$(XMLSOC):$(SGML_CATALOG_FILES)"; \
	nsgmls -s -E 10 $(dictname).tei
	# way 2
	if [ -x $(xmllint) ]; then \
		$(xmllint) --noout --valid $(dictname).tei; fi

test: $(dictname).index $(dictname).dict
	$(toolsdir)/testing/test-database.pl -f $(dictname) \
 -l $(DICTD_LOCALE) |tee testresult-$(version).log

test-reverse: $(rdictname).index $(rdictname).dict
	$(toolsdir)/testing/test-database.pl -f $(rdictname) \
 -l $(DICTD_LOCALE) |tee testresult-$(version)-reverse.log

test-c5: $(dictname).c5.index $(dictname).c5.dict.dz
	$(toolsdir)/testing/test-database.pl -f $(dictname).c5 \
 -l $(DICTD_LOCALE) |tee testresult-$(version)-c5.log

test-reverse-c5: $(rdictname).c5.index $(rdictname).c5.dict
	$(toolsdir)/testing/test-database.pl -f $(rdictname).c5 \
 -l $(DICTD_LOCALE) |tee testresult-$(version)-c5-reverse.log

commit: 
	cvs -z3 commit

dbupdate:
	$(toolsdir)/extractdata.pl -vfd $(dictname)

# this is a "double colon rule"
# adding another "clean::" rule in your Makefile
# allows to extend this with additional commands
#
# for example:
#
# clean::
#	-rm delete_this_file.too
clean::
	rm -f $(dictname).index $(dictname).dict
	rm -f $(dictname).c5 $(dictname).dict.dz testresult-*.log
	rm -f $(FREEDICTDIR)/release/dict-bz2/$(dictname).tar.bz2
	rm -f $(FREEDICTDIR)/release/dict-tgz/$(dictname).tar.gz

dist:
	@if [ ! -d $(FREEDICTDIR)/release/src ]; then \
		mkdir $(FREEDICTDIR)/release/src; fi
	(cd $(shell pwd)/..; \
	tar -cvjf $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.tar.bz2 \
		--exclude=CVS --exclude=freedict-*.tar.bz2 --exclude=.* \
		$(addprefix $(dictname)/, $(DISTFILES)))

#############################
#### targets for rpm packages
#############################

release-rpm: freedict-$(dictname).spec dist
	@if [ ! -d $(FREEDICTDIR)/release/rpm ]; then \
		ln -s /usr/src/packages/RPMS/noarch \
		$(FREEDICTDIR)/release/rpm; fi
	@if [! -x /usr/src/packages/SOURCES/freedict-$(dictname)-$(version).src.tar.bz2 ]; then \
		ln -s $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.tar.bz2 \
			/usr/src/packages/SOURCES; fi
	rpmbuild --target=noarch -ba freedict-$(dictname).spec

release-rpm-reverse:


release-rpm-freedict-tools:
	@if [ ! -d $(FREEDICTDIR)/release/rpm ]; then \
		ln -s /usr/src/packages/RPMS/noarch \
		$(FREEDICTDIR)/release/rpm; fi
	(cd $(FREEDICTDIR); \
	 tar cjf /usr/src/packages/SOURCES/freedict-tools.tbz2 \
		--exclude=CVS tools/*)
	rpmbuild --target=noarch -ba freedict-tools.spec

############################################
#### targets for (z)bedic on zaurus platform
############################################
# For a broader view, read the FreeDict HOWTO. It takes these steps:
#  1a. apply `sort.xsl'
#  1b. apply `group-homographs-sorted.xsl'
#  1c. link to `tei-wrapper.xml'
#  2a. apply `tei2dic.xsl' to create a bedic format file with newlines
#      (formerly `tei2zbdic.py' was used for 2a&c)
#  2b. convert to Unicode NFC using charlint.pl
#  2c. replace double newlines by NUL bytes and replace \\e by \e using perl
#  3. apply `xerox' that comes with libbedic to generate missing properties
#  4. apply `dictzip' to compress it
#  5. optionally execute dic2ipk.sh to create a Zaurus installation package

sorted.tei: $(dictname).tei $(xsldir)/sort.xsl
	$(XSLTPROCESSOR) $(xsldir)/sort.xsl $< >$@

grouped.tei: sorted.tei $(xsldir)/group-homographs-sorted.xsl
	$(XSLTPROCESSOR) $(xsldir)/group-homographs-sorted.xsl $< >$@

tei-wrapper.xml: $(xsldir)/tei-wrapper.xml
	ln -s $(xsldir)/tei-wrapper.xml

# optional
unwrapped.tei: grouped.tei tei-wrapper.xml
	xmllint --noent tei-wrapper.xml >unwrapped.tei

bedic-precedence: $(dictname).unxeroxed.dic
	@if [ -z "$(LA1locale)" ]; \
	then echo 'Please set LA1locale to the locale of the source language!'; \
	else echo "The output of this should be incorporated appropriately \
into \`tei2dic.xsl':"; \
	$(XEROX) --generate-char-precedence $(LA1locale) $<; fi

$(dictname).escaped.dic: tei-wrapper.xml grouped.tei $(xsldir)/tei2dic.xsl
	$(XSLTPROCESSOR) $(xsldir)/tei2dic.xsl $< >$@

# Charlint - A Character Normalization Tool
# http://www.w3.org/International/charlint/
#
# This might have to adapted for you:
#unicodedata = /usr/lib/perl5/5.8.5/unicore/UnicodeData.txt
# or
#unicodedata = $(toolsdir)/UnicodeData.txt
#$(unicodedata):
#	wget ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt
#
#$(CHARLINT_DATA): $(unicodedata)
#	$(CHARLINT) -f $< -S $@ -d -D
#$(CHARLINT):
#	wget http://www.w3.org/International/charlint/charlint.pl

# generate NFC (Canonical Decomposition followed by Canonical Composition)
$(dictname).normalized.dic: $(dictname).escaped.dic
	$(CHARLINT) -s $(CHARLINT_DATA) <$< >$@

$(dictname).unxeroxed.dic: $(dictname).normalized.dic
	perl -pi -e 's/\\0/\x00/gm; s/\\e/\e/gm;' <$< >$@

# old style:
#%.unxeroxed.dic: %.tei
#	$(toolsdir)/tei2dic.py $< $*.unxeroxed.dic

$(FREEDICTDIR)/release/dic/freedict-%-$(version).dic: %.unxeroxed.dic
	@if [ ! -d $(FREEDICTDIR)/release/dic ]; then \
		mkdir $(FREEDICTDIR)/release/dic; fi
	$(XEROX) $*.unxeroxed.dic $@

release-bedic: $(FREEDICTDIR)/release/dic/freedict-$(dictname)-$(version).dic.dz

# optional
$(FREEDICTDIR)/release/ipk/%.ipk: $(FREEDICTDIR)/release/dic/%.dic.dz
	@if [ ! -d $(FREEDICTDIR)/release/ipk ]; then \
		mkdir $(FREEDICTDIR)/release/ipk; fi
	cd $(FREEDICTDIR)/release/ipk && ln -s `$(toolsdir)/dic2ipk.sh $<` $@

# optional
release-zaurus: $(FREEDICTDIR)/release/ipk/freedict-$(dictname)-$(version).ipk

clean::
	rm -f sorted.tei grouped.tei tei-wrapper.xml unwrapped.tei \
	$(dictname).escaped.dic $(dictname).normalized.dic $(dictname).unxeroxed.dic \
	$(FREEDICTDIR)/release/dic/freedict-$(dictname)-$(version).dic \
	$(FREEDICTDIR)/release/dic/freedict-$(dictname)-$(version).dic.dz

##################################
#### targets for StarDict platform
##################################

# This tool comes with stardict
# I have a symbolic link in my tools directory to the actual location
DICTD2DIC = $(toolsdir)/dictd2dic

# This is hardcoded into dictd2dic :(
stardict_prefix = dictd_www.freedict.de_

# idxhead is required to preexist by dictd2dic. The reason is not documented.
$(dictname).idxhead:
	echo -n "" > $@

$(stardict_prefix)$(dictname).idx.gz $(stardict_prefix)$(dictname).dict.dz \
	dictd2dic.out: $(dictname).index $(dictname).dict $(dictname).idxhead
	$(DICTD2DIC) $(dictname) >dictd2dic.out

# $(wordcount) and $(idxfilesize) are a target-specific variables
$(stardict_prefix)$(dictname).ifo: \
	wordcount=$(word 2, $(shell tail -n1 dictd2dic.out))

$(stardict_prefix)$(dictname).ifo: \
	idxfilesize=$(strip $(shell zcat $(stardict_prefix)$(dictname).idx.gz | wc -c))

authorresp.out: $(dictname).tei $(xsldir)/getauthor.xsl
	$(XSLTPROCESSOR) $(xsldir)/getauthor.xsl $< >$@

title.out: $(dictname).tei $(xsldir)/gettitle.xsl
	$(XSLTPROCESSOR) $(xsldir)/gettitle.xsl $< >$@

$(stardict_prefix)$(dictname).ifo: $(stardict_prefix)$(dictname).idx.gz \
	dictd2dic.out authorresp.out title.out
	@echo "Generating $@..."
	@echo "StarDict's dict ifo file" > $@
	@echo "version=2.4.2" >> $@
	@echo "wordcount=$(wordcount)" >> $@
	@echo "idxfilesize=$(idxfilesize)" >> $@
	@echo "bookname=$(shell cat title.out)" >> $@
	@echo "author=$(shell sed -e "s/ <.*>//" <authorresp.out)" >> $@
	@echo "email=$(shell sed -e "s/.* <\(.*\)>/\1/" <authorresp.out)" >> $@
	@echo "website=$(shell $(MAKE) sourceURL)" >> $@
	@echo "description=Converted to StarDict format by freedict.org" >> $@
	@echo "date=$(shell date +%G.%m.%d)" >> $@
	@echo "sametypesequence=m" >> $@
	@cat $@

stardict: $(stardict_prefix)$(dictname).ifo

$(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2: \
       	$(stardict_prefix)$(dictname).ifo \
	$(stardict_prefix)$(dictname).dict.dz \
	$(stardict_prefix)$(dictname).idx.gz
	@if [ ! -d $(FREEDICTDIR)/release/stardict ]; then \
		mkdir $(FREEDICTDIR)/release/stardict; fi
	cd .. && tar -cvjf \
	  $(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2 \
	  $(addprefix $(dictname)/, $^)

release-stardict: \
	$(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2

clean::
	rm -f $(dictname).idxhead $(stardict_prefix)$(dictname).idx.gz \
	$(stardict_prefix)$(dictname).dict.dz $(stardict_prefix)$(dictname).ifo \
	$(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2 \
	dictd2dic.out authorresp.out

#######################
#### Makefile-technical
#######################

.PHONY: all version status sourceURL maintainer dirs install uninstall reverse \
	release-dict-tbz2-c5 release-dict-tbz2-c5-reverse \
	release-dict-tgz release-dict-tgz-reverse \
	release-dict-tbz2 release-dict-tbz2-reverse \
	vok release-evolutionary \
	bedic-precedence release-bedic release-zaurus \
	release-rpm release-rpm-reverse release-rpm-freedict-tools \
	commit clean dist dbupdate validation \
	test test-reverse test-c5 test-c5-reverse \
	find-homographs \
	stardict release-stardict

